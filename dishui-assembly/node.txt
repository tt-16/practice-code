二进制 ： 用两个任意符号来表示的，若用{0,1}表示，逢2进1
八进制：  用八个任意符号来表示的，若用{0,1,2,3,4,5,6,7}, 逢8进1

八进制表：
0    1    2    3    4    5    6    7   
10   11   12   13   14   15   16   17  
20   21   22   23   24   25   26   27
30   31   32   33   34   35   36   37
40   41   42   43   44   45   46   47
50   51   52   53   54   55   56   57
60   61   62   63   64   65   66   67
70   71   72   73   74   75   76   77
100  101  102  103  104  105  106  107
110  111  112  113  114  115  116  117

进制本质是查数

八进制加法表，查上表（如 1+1 即为1往后加1个， 4加6即4往后数6个为12）
1+1=2
1+2=3	  2+2=4  
1+3=4   2+3=5   3+3=6  
1+4=5   2+4=6   3+4=7   4+4=10  
1+5=6   2+5=7   3+5=10  4+5=11  5+5=12  
1+6=7   2+6=10  3+6=11  4+6=12  5+6=13  6+6=14
1+7=10  2+7=11  3+7=12  4+7=13  5+7=14  6+7=15  7+7=16

八进制乘法表，查上表（如 1*1 即为1个1相加， 4*6即4个6相加为28，4*7即为7+7+7+7，即为16往后数7个再数7个）
1*1=1
1*2=2	  2*2=4  
1*3=3   2*3=6    3*3=11  
1*4=4   2*4=10   3*4=14   4*4=20  
1*5=5   2*5=12   3*5=17   4*5=24  5*5=31  
1*6=6   2*6=14   3*6=22   4*6=30  5*6=36  6*6=44
1*7=7   2*7=16   3*7=25   4*7=34  5*7=43  6*7=52  7*7=61

八进制运算： （根据加法和乘法表，除法的计算是也是利用乘法表，如 234/4，先看4乘以谁等于23,4*4等于20还余3，在看4乘以谁等于34，发现7结果即为47）

	277				276		     236        234            
+	333			*	 54      -  54      /   4          
-------	  -------	   ------		 -------              	    
	632			 1370        162         47           
				 +16660             
				---------          
					1620250            
	
		
【二进制：0-15  16  于16进制的映射】
-----------------------------------
二进制	16进制
 0000			0
 0001 		1
 0010 		2	
 0011 		3
 0100 		4
 0101 		5
 0110 		6
 0111 		7
 1000 		8
 1001   	9
 1010 		A
 1011 		B
 1100 		C
 1101 		D
 1110 		E
 1111 		F
-----------------------------------





32位通用寄存器的指定用途：

寄存器32位     主要用途        														 编号     	存储数据范围
EAX							累加器																			0					0 - 0xFFFFFFFF																		
ECX							基地																				1					0 - 0xFFFFFFFF							
EDX							I/O指针																			2					0 - 0xFFFFFFFF																					
EBX							DS段的数据指针															3					0 - 0xFFFFFFFF									
ESP							堆栈指针																		4					0 - 0xFFFFFFFF												
EBP							SS段的数据指针															5					0 - 0xFFFFFFFF													
ESI							字符串操作的源指针；SS段数据指针						6					0 - 0xFFFFFFFF										
EDI							字符串操作的目标指针；ES段的数据指针				7					0 - 0xFFFFFFFF						

16位寄存器     8位寄存器[0-7 ,8-15]
 AX							  AL 
 CX 							CL
 DX	 						  DL
 BX	 						  BL
 SP							  AH
 BP							  CH
 SI 							DH
 DI 							BH



汇编指令由 操作码 和 操作数 组成
操作码    目标操作数  	源操作数    
mov				eax,						 1 				


mov 目标操作数，源操作数	
1.源操作数可以是立即数，通用寄存器，段寄存器，或者内存单元
2.目标操作数可以是通用寄存器，段寄存器或者内存单元
3.操作数的宽度必须一致
4.源操作数和目标操作数不能同时为内存单元

mov指令   						 add指令    sub指令    and指令    or指令    xor指令   not指令
mov r/m8,r8																																	not r/m8														
mov r/m16,r16																																not r/m16						
mov r/m32,r32																												        not r/m32																		
mov r8,r/m8	
mov r16,r/m16	
mov r32,r/m32																																		
mov r8,imm8
mov r16,imm16	
mov r32,imm32			

内存操作
mov eax, dword ptr ds:[0x0012ff24]	


内存寻址的五种方式：	


寻址公式一：[立即数]
	
	读取内存的数：
	mov eax,dword ptr ds:[0x13ffc4]
	mov eax,dword ptr ds:[0x13ffc8]
	
	向内存中写入数据：
	mov dword ptr ds:[0x13ffc4],eax
	mov dword ptr ds:[0x13ffc8],eax		
	
	获取内存编号：
	LEA BAX,DWORD PTR DS:[0X13FFC4]
	LEA BAX,DWORD PTR DS:[ESP+8]
				
															
寻址公式二：[reg]  reg代表寄存器  可以是8个通用寄存器中的任意一个

	读取内存的值：
	MOV ECX,0x13FFD0
	MOV EAX,DWORD PTR DS:[ECX]
	
	向内存中写入数据：
	MOV EDX,0x13FFD8
	MOV DWORD PTR DS:[EDX],0x87654321
	
	获取内存编号
	LEA EAX,DWORD PTR DS:[EDX]
	MOV EAX,DWORD PTR DS:[EDX]
		
																																															
寻址公式三：[ reg+立即数 ]	

	读取内存的值：
	MOV ECX,0x13FFD0
	MOV EAX,DWORD PTR DS:[ECX+4]
	
	向内存中写入数据：
	MOV EDX,0x13FFD8
	MOV DWORD PTR DS:[EDX+0xC],0x87654321
	
	获取内存编号
	LEA EAX,DWORD PTR DS:[EDX+4]
	MOV EAX,DWORD PTR DS:[EDX+4]	
				
																																													
寻址公式四：[reg+reg*{1,2,4,8}]		

	读取内存的值：
	MOV EAX,13ffc4
	MOV ECX,2
	MOV EDX,DWORD PTR DS:[EAX+ECX*4]
	
	向内存中写入数据：
	MOV EAX,0x13FFD8
	MOV ECX,2
	MOV DWORD PTR DS:[EAX+ECX*4],0x87654321
	
	获取内存编号
	LEA EAX,DWORD PTR DS:[EAX+ECX*4]
																		
																																													
寻址公式五：[reg+reg*{1,2,4,8}+立即数]		
	
	读取内存的值：
	MOV EAX,13ffc4
	MOV ECX,2
	MOV EDX,DWORD PTR DS:[EAX+ECX*4+4]
	
	向内存中写入数据：
	MOV EAX,0x13FFD8
	MOV ECX,2
	MOV DWORD PTR DS:[EAX+ECX*4+4],0x87654321
	
	获取内存编号
	LEA EAX,DWORD PTR DS:[EAX+ECX*4+4]																																											
																					
																						
																						
																						
																																													
	PUSH指令
		1. PUSH R32
		2. PUSH R16
		3. PUSH M16
		4. PUSH M32
		5. PUSH imm8/imm16/imm32
		
	POP指令				
		1. pop r32
		2. pop r16
		3. pop m16
		4. pop m32				
		
			
	PUSHAD指令  保护现场 把八个寄存器的值入栈
	
	POPAD指令		恢复现场
	
	
	
	
	
	
	
	
	EFLAGS寄存器
	
	31          22  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
	|						 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
																					0								OF  DF  IF  TF  SF  ZF   0  AF   0  PF   1  CF

	[OF]溢出标志			- 11
	[DF]方向标志
	[IF]终端标志
	[TF]单步标志
	[SF]符号标志			- 7
	[ZF]零标志				- 6
	[AF]辅助进位标志	- 4
	[PF]奇偶标志			- 2 
	[CF]进位标志      - 0


	1.进位标志CF (Carry Flag): 如果运算结果的最高位产生了一个进位或者借位，那么其值为1，否则为零。
		MOV AL, 0xEF
		ADD AL, 2
		
		MOV AL,0xFE
		ADD AL,2
		
	2.奇偶标志PF (Parity Flag): 奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。
		如果“1”的个数为偶数，则PF的值为1，否则其值为0.
		MOV AL,3
		ADD AL,3
		ADD AL,2
		
	3.辅助进位标志AF (Auxiliary Carry Flag): 在发生下列情况时，辅助进位标志AF的值被置1，否则其值为0；
		(1) 在字操作时，发生低字节向高字节进位或者借位时；
		(2) 在字节操作时，发生低4位向高4位进位或借位时。
		MOV EAX, 0x55EEFFFF     MOV AX,5EFF      MOV AL,4E
		ADD	EAX,2								ADD AX,2				 ADD AL,2
		
	4.零标志ZF(Zero Flag): 零标志ZF用来反映运算结果是否为0。
		如果运算结果为0，则其值为1，否则其值为0，在判断运算结果是否为0时，可使用此标志位。
		XOR EAX,EAX
		MOV EAX,2
		SUB EAX,2



---------------
	PE
	下断点
	win32 API+
	函数调用
	熟悉堆栈-画堆栈图
	Call JCC 标志寄存器
	
	ADC/SBB/XCHG
	MOVS指令
	STOS指令
	REP指令
	---------------																												
																																																																										
																																																																										
																																																																										
																																																																										
																																																																										
																																																																										
																																																																										
																							
																							
																							
																							
																							
																							
																																																																										